<?xml version="1.0" encoding="UTF-8"?>

<!-- Use "ant -p" to see a description of tasks -->
<project name="Server" xmlns:ivy="antlib:org.apache.ivy.ant" default="build" basedir=".">

    <property environment="env"/>

    <property name="app.root" value="${basedir}/../"/>

    <property file="${app.root}/BuildInfra/global.properties"/>

    <property name="module.jarfile" value="server.jar"/>
    <property name="module.warfile" value="${ant.project.name}.war"/>

    <property name="src.dir" value="${server.home}/src"/>
    <property name="web.dir" value="${server.home}/web"/>
    <property name="web.images.dir" value="${web.dir}/images"/>
    <property name="web.css.dir" value="${web.dir}/css"/>
    <property name="web.scripts.dir" value="${web.dir}/scripts"/>
    <property name="web.jsp.dir" value="${web.dir}/jsp"/>
    <property name="web.resources.dir" value="${web.dir}/resources"/>
    <property name="resources.dir" value="${server.home}/resources"/>
    <property name="config.dir" value="${resources.dir}/config"/>
    <property name="shell.scripts.dir" value="${resources.dir}/shellScripts"/>
    <property name="sql.dir" value="${resources.dir}/sql"/>
    <property name="templates.dir" value="${resources.dir}/templates"/>
    <property name="beandoc.propsfile" value="${config.dir}/beandoc.properties"/>
    <property name="findbugs.home" value="${3rdparty.home}/findbugs/1.3.2"/>
    <property name="findbugs.xml.file" value="${ant.project.name}-bug-report.xml"/>
    <property name="hibernate.cfg.xml" value="${config.dir}/hibernate.cfg.xml"/>
    <property name="web.server.root" value="${user.dir}/tonguetied/webapp"/>
    <property name="web.server.css" value="${web.server.root}/css"/>
    <property name="web.server.images" value="${web.server.root}/images"/>
    <property name="web.server.scripts" value="${web.server.root}/scripts"/>
    <property name="web.server.webinf" value="${web.server.root}/WEB-INF"/>
    <property name="server.jar" value="${application.short.name}Server.jar"/>

    <property file="${config.dir}/jdbc.properties"/>
   
    <!-- temporary directories -->
    <property name="classes.dir" value="${server.home}/classes"/>
    <property name="build.dir" value="${server.home}/builds"/>
    <property name="docs.dir" value="${server.home}/docs"/>
    <property name="generated.dir" value="${server.home}/generated"/>
    <property name="docs.api.dir" value="${docs.dir}/api"/>
    <property name="docs.beandoc.dir" value="${docs.dir}/beandoc"/>
    <property name="docs.hibernate.dir" value="${docs.dir}/hibernate"/>
    <property name="docs.schema.dir" value="${docs.dir}/schema"/>
    <property name="logs.dir" value="${server.home}/logs"/>
    <property name="output.dir" value="${server.home}/output"/>
    <property name="hibernate.propsfile" value="hibernate.properties"/>
    <property name="schema.file" value="schema-export.sql"/>
    <property name="mapping.files.timestamp" value="${generated.dir}/mapping.files.timestamp"/>
    <property name="schema.file.timestamp" value="${generated.dir}/schema.file.timestamp"/>
    <property name="compiled.reports.dir" value="${generated.dir}/reports"/>
    <property name="build.details.file" value="${generated.dir}/buildNumber.properties"/>


    <property name="build.debug" value="on"/>

    <path id="common.classpath">
        <pathelement location="${3rdparty.home}/Jakarta-Commons/commons-logging.jar"/>
    </path>
        
    <path id="hsql.classpath">
        <pathelement location="${3rdparty.home}/HSQLDB/1.8.0/hsqldb.jar"/>
    </path>

    <path id="hibernate.classpath">
        <pathelement location="${3rdparty.home}/Hibernate/3.2.0/hibernate3.jar"/>
        <pathelement location="${3rdparty.home}/ehcache/1.3.0/ehcache.jar"/>
        <pathelement location="${3rdparty.home}/Jta/jta.jar"/>
        <pathelement location="${3rdparty.home}/Hibernate/annotations/3.2.0/ejb3-persistence.jar"/>
        <pathelement location="${3rdparty.home}/Hibernate/annotations/3.2.0/hibernate-annotations.jar"/>
    </path>

    <path id="compile.classpath">
        <path refid="hibernate.classpath"/>
        <pathelement location="${3rdparty.home}/Spring/2.5/spring.jar"/>
        <pathelement location="${3rdparty.home}/Spring/2.5/spring-webmvc.jar"/>
        <pathelement location="${3rdparty.home}/Jetty/6.1.1/jetty.jar"/>
        <pathelement location="${3rdparty.home}/Jetty/6.1.1/jetty-util.jar"/>
        <pathelement location="${3rdparty.home}/Jetty/6.1.1/servlet-api-2.5.jar"/>
        <pathelement location="${3rdparty.home}/Jetty/6.1.1/jsp-2.1/jsp-2.1.jar"/>
        <pathelement location="${3rdparty.home}/Log4j/1.2.14/log4j.jar"/>
        <pathelement location="${3rdparty.home}/Jakarta-Commons/commons-lang-2.1.jar"/>
        <pathelement location="${3rdparty.home}/Jakarta-Commons/commons-collections-3.2.jar"/>
        <pathelement location="${3rdparty.home}/Jakarta-Commons/commons-cli-1.1.jar"/>
        <path refid="fmpp.classpath"/>
        <pathelement location="${3rdparty.home}/POI/2.5.1/poi.jar"/>
        <pathelement location="${3rdparty.home}/Spring/acegi-security/1.0.4/acegi-security.jar"/>
    </path>

    <path id="beandoc-classpath">
        <path refid="common.classpath"/>
        <pathelement location="${3rdparty.home}/Spring/beandoc/0.7.1/spring-beandoc.jar" />
        <pathelement location="${3rdparty.home}/Spring/2.5/spring.jar"/>
        <pathelement location="${3rdparty.home}/jdom/1.0/jdom.jar"/>
    </path>

    <path id="hibernate.tools.classpath">
        <path refid="common.classpath"/>
        <path refid="hsql.classpath"/>
        <path refid="hibernate.classpath"/>
        <pathelement location="${metadata.home}/builds/metadata.jar"/>
        <pathelement location="${3rdparty.home}/Hibernate/tools/3.2.0.beta8/hibernate-tools.jar"/>
        <pathelement location="${3rdparty.home}/FreeMarker/2.3.9/freemarker.jar"/>
        <pathelement location="${3rdparty.home}/Jakarta-Commons/commons-collections-3.2.jar"/>
        <pathelement location="${3rdparty.home}/dom4j/1.6.1/dom4j.jar"/>
        <pathelement location="${3rdparty.home}/cglib/2.1.3/cglib-nodep-2.1_3.jar"/>
        <pathelement location="${3rdparty.home}/Spring/acegi-security/1.0.4/acegi-security.jar"/>
    </path>

    <path id="fmpp.classpath">
        <pathelement location="${3rdparty.home}/FreeMarker/FMPP/0.9.11/fmpp_teamworks.jar"/>
        <pathelement location="${3rdparty.home}/FreeMarker/2.3.9/freemarker.jar"/>
        <pathelement location="${3rdparty.home}/FreeMarker/FMPP/0.9.11/bsh.jar"/>
        <pathelement location="${3rdparty.home}/oro/2.0.8/jakarta-oro.jar"/>
        <path refid="hsql.classpath"/>
    </path>
    
    <taskdef name="hibernatetool"
             classname="org.hibernate.tool.ant.HibernateToolTask">
        <classpath refid="hibernate.tools.classpath"/>
    </taskdef>

    <taskdef name="beandoc" 
             classname="org.springframework.beandoc.client.AntTask"
             classpathref="beandoc-classpath"/>

    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
        <classpath path="${findbugs.home}/lib/findbugs-ant.jar"/>
    </taskdef>	

    <taskdef name="fmpp"
             classname="fmpp.tools.AntTask" 
             classpathref="fmpp.classpath"/>
    
    <target name="resolve" description="Retrieve dependencies with ivy">
        <property name="ivy.default.ivy.user.dir" value="${dependencies.home}"/>
        <ivy:retrieve/>
    </target>

    
    <target name="init">
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.dir}/war"/>
        <mkdir dir="${docs.dir}"/>
        <mkdir dir="${docs.beandoc.dir}"/>
        <mkdir dir="${generated.dir}"/>
        <mkdir dir="${output.dir}"/>
        <mkdir dir="${compiled.reports.dir}"/>
        <mkdir dir="${logs.dir}"/>
    </target>

    <target name="clean.classes" description="Remove all compiled classes">
        <echo message="Cleaning ${ant.project.name} ..."/>
        <delete dir="${classes.dir}" failonerror="true" deleteonexit="true"/>
    </target>

    <target name="clean" depends="clean.classes" description="Remove all generated files, including but not limited to classes, log files and jar files">
        <delete dir="${build.dir}" failonerror="true" deleteonexit="true"/>
        <delete dir="${docs.dir}" failonerror="true" deleteonexit="true"/>
        <delete dir="${output.dir}" failonerror="true" deleteonexit="true"/>
        <delete dir="${generated.dir}" failonerror="true" deleteonexit="true"/>
        <delete dir="${logs.dir}" failonerror="true" deleteonexit="true"/>
    </target>

    <target name="gen.resources" depends="init" description="Generate resource files from the descriptions in the Multi Language Portal">
        <echo message="Generating resource files for project ${ant.project.name} ..."/>
        <delete failonerror="true" deleteonexit="true">
            <fileset dir="${generated.dir}">
                <include name="*.rawproperties"/>
            </fileset>
        </delete>
        <fmpp sourceroot="${templates.dir}/freemarker/resources" outputroot="${generated.dir}" logfile="fmpp.log" outputencoding="UTF-8" replaceextension="ftl, rawproperties">
            <data expandproperties="true">
                fileNamePrefix: tonguetied
                props: sql({url: ${tonguetied.db.url}:${tonguetied.db.port}/${tonguetied.db.name},driver:${tonguetied.db.driver},username:${tonguetied.db.user}},
                           'SELECT k.keyword, l.code AS language_code, c.code AS country_code, t.value
                            FROM keyword k, translation t, language l, bundle b, country c
                            WHERE t.keyword_id = k.id
                            AND t.language_id = l.id
                            AND t.country_id = c.id
                            AND t.bundle_id = b.id
                            AND b.name = \'TongueTied\'
                            ORDER BY l.code, c.code')
            </data>
        </fmpp>
        <native2ascii src="${generated.dir}" 
                      dest="${generated.dir}"
                      encoding="utf8"
                      ext=".properties"
                      includes="*.rawproperties"/>
    </target>
    
    <target name="compile" depends="init" description="Generate all the class files for this module">
        <echo message="Compiling module ${ant.project.name} ..."/>
        <javac srcdir="${src.dir}"
               destdir="${classes.dir}"
               debug="${build.debug}"
               optimize="off"
               deprecation="off">
            <include name="**/*.java"/>
            <classpath refid="compile.classpath" />
        </javac>
    </target>

    <target name="jar" depends="gen.schema" description="Generate the Java Archive files and put it an accessible location for other projects">
        <echo message="Generating jar file for module ${ant.project.name} ..."/>
        <jar jarfile="${build.dir}/${module.jarfile}">
            <zipfileset dir="${classes.dir}">
                <include name="**/*.class"/>             	
                <exclude name="org/tonguetied/server/Server.class"/>
                <exclude name="org/tonguetied/server/ServerConstants.class"/>
            </zipfileset>
            <zipfileset file="${hibernate.cfg.xml}"/>
        </jar>
        
        <jar jarfile="${build.dir}/${server.jar}">
            <zipfileset dir="${classes.dir}">
                <include name="org/tonguetied/server/Server.class"/>
                <include name="org/tonguetied/server/ServerConstants.class"/>
            </zipfileset>
        </jar>
    </target>

    <target name="manage.build.properties" depends="init">
        <propertyfile file="${build.details.file}" comment="Last tonguetied build">
            <entry key="build.date" type="date" value="now"/>
            <entry key="version" type="string" value="${shortversion}"/>
            <entry key="build.number" type="string" value="@@${label}"/>
        </propertyfile>
        <replace file="${build.details.file}" token="@@build." value=""/>
    </target>
    
    <target name="war" depends="jar, manage.build.properties" description="Generate the Web Archive">
        <echo message="Generating war file for module ${ant.project.name} ..."/>
        <war destfile="${build.dir}/war/${module.warfile}" webxml="${config.dir}/web.xml">
            <lib dir="${build.dir}">
                <include name="${module.jarfile}"/>
            </lib>
            <lib dir="${3rdparty.home}/Antlr/2.7.6">
                <include name="antlr.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/cglib/2.1.3">
                <include name="cglib-nodep-2.1_3.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/displaytag/1.1.1">
                <include name="displaytag.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/DOM4J/1.6.1">
                <include name="dom4j.jar"/>
                <include name="jaxen-1.1-beta-7.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/ehcache/1.3.0">
                <include name="ehcache.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/FreeMarker/2.3.9">
                <include name="freemarker.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/FreeMarker/FMPP/0.9.11">
                <include name="fmpp_teamworks.jar"/>
                <include name="bsh.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/Hibernate/3.2.0">
                <include name="hibernate3.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/Hibernate/annotations/3.2.0">
                <include name="hibernate-annotations.jar"/>
                <include name="ejb3-persistence.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/HSQLDB/1.8.0">
                <include name="hsqldb.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/J2ee">
                <include name="jstl.jar"/>
                <include name="standard.jar"/>
                <include name="taglibs-string.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/Jakarta-Commons">
                <include name="commons-beanutils-1.7.0.jar"/>
                <include name="commons-collections-3.2.jar"/>
                <include name="commons-digester-1.8.jar"/>
                <include name="commons-el.jar"/>
                <include name="commons-fileupload-1.2.1.jar"/>
                <include name="commons-io-1.4.jar"/>
                <include name="commons-lang-2.1.jar"/>
                <include name="commons-logging.jar"/>
            	<include name="commons-codec-1.3.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/Jta">
                <include name="jta.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/Log4j/1.2.14">
                <include name="log4j.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/POI/2.5.1">
                <include name="poi.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/oro/2.0.8">
                <include name="jakarta-oro.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/sitemesh/2.3">
                <include name="sitemesh.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/Spring/2.5">
                <include name="spring.jar"/>
                <include name="spring-webmvc.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/Spring/acegi-security/1.0.4">
                <include name="acegi-security.jar"/>
                <include name="license-acegi-security.txt"/>
            </lib>
            <lib dir="${3rdparty.home}/struts-menu/2.4.3">
            	<include name="LICENCE.struts-menu.txt"/>
                <include name="struts-menu.jar"/>
            </lib>
            <lib dir="${3rdparty.home}/Velocity">
                <include name="velocity-1.4.jar"/>
                <include name="velocity-tools-view-1.1.jar"/>
            </lib>
            <webinf dir="${config.dir}">
                <include name="*.xml"/>
                <include name="jdbc.properties"/>
                <include name="log4j.properties"/>
                <include name="fmpp.cfg"/>
                <exclude name="web.xml"/>
            </webinf>
            <webinf dir="${web.dir}">
                <include name="**/jsp/**/*.jsp"/>
                <exclude name="**/ROOT/*.*"/>
            </webinf>
            <classes dir="${config.dir}">
                <include name="tonguetied*.properties"/>
                <include name="language.properties"/>
            </classes>
            <classes dir="${generated.dir}">
                <include name="buildNumber.properties"/>
            </classes>   
            <zipfileset dir="${web.jsp.dir}/ROOT">
                <include name="*.jsp"/>
            </zipfileset>
            <zipfileset dir="${web.images.dir}" prefix="images"/>
            <zipfileset dir="${web.css.dir}" prefix="css"/>
            <zipfileset dir="${web.scripts.dir}" prefix="scripts"/>
            <zipfileset dir="${templates.dir}/freemarker/export" prefix="templates">
                <include name="*.ftl"/>
            </zipfileset>
        </war>
    </target>

    <target name="build" depends="validate.xml, war" description="Compile entire module and validate xml files"/>
 
    <target name="validate.xml" description="Validate XML configuration files" >
        <echo message="validating XML in module ${ant.project.name}..." />
        <xmlcatalog id="xml.entities">
            <dtd publicid="-//Hibernate/Hibernate Configuration DTD 3.0//EN"
                 location="${3rdparty.home}/XMLEntities/hibernate-configuration-3.0.dtd"/>
        </xmlcatalog>
        <schemavalidate>
            <xmlcatalog>
                <dtd publicid="-//W3C//DTD XMLSCHEMA 200102//EN" 
                    location="${3rdparty.home}/XMLEntities/XMLSchema.dtd"/>
                <dtd publicid="datatypes" 
                    location="${3rdparty.home}/XMLEntities/datatypes.dtd"/>
            </xmlcatalog>
            <schema namespace="http://www.w3.org/XML/1998/namespace"
            	file="${3rdparty.home}/XMLEntities/xml.xsd"/>
            <schema namespace="http://www.w3.org/2001/XMLSchema"
  				file="${3rdparty.home}/XMLEntities/XMLSchema.xsd" />
            <schema namespace="$http://www.springframework.org/schema/beans"
            	file="${3rdparty.home}/XMLEntities/spring-beans-2.5.xsd"/>
            <schema namespace="http://www.springframework.org/schema/aop" 
            	file="${3rdparty.home}/XMLEntities/spring-aop-2.5.xsd"/>
            <schema namespace="http://www.springframework.org/schema/tx"
            	file="${3rdparty.home}/XMLEntities/spring-tx-2.5.xsd"/>
            <fileset dir="${config.dir}" id="xml.resources">
                <include name="**/*-context.xml"/>
                <include name="**/web-servlet.xml"/>
            </fileset>
        </schemavalidate>
        <schemavalidate file="${config.dir}/web.xml">
            <schema namespace="http://www.w3.org/2001/XMLSchema"
                      file="${3rdparty.home}/XMLEntities/XMLSchema.xsd" />
            <xmlcatalog>
                <entity publicId="http://java.sun.com/xml/ns/j2ee"
                	location="${3rdparty.home}/XMLEntities/web-app_2_4.xsd"/>
                <entity publicId="http://java.sun.com/xml/ns/j2ee"
                	location="${3rdparty.home}/XMLEntities/j2ee_1_4.xsd"/>
            </xmlcatalog>
            <!--schema namespace="http://java.sun.com/xml/ns/j2ee"
            	file="${3rdparty.home}/XMLEntities/web-app_2_4.xsd"/>
            <schema namespace="http://java.sun.com/xml/ns/j2ee"
            	file="${3rdparty.home}/XMLEntities/j2ee_1_4.xsd"/-->
    	</schemavalidate>
        <xmlvalidate warn="yes" failonerror="true">
            <fileset dir="${config.dir}" id="xml.resources">
                <include name="**/hibernate.cfg.xml"/>
            </fileset>
            <xmlcatalog refid="xml.entities" />
        </xmlvalidate>
    </target>

    <target name="javadoc" depends="init" description="Generate the javadoc for this module">
        <echo message="Generating java api documentation for module ${ant.project.name}..."/>
        <javadoc destdir="${docs.api.dir}"
                 useexternalfile="true"
                 author="true"
                 version="true"
                 use="true"
                 classpathref="compile.classpath"
                 windowtitle="${ant.project.name} API">
            <doctitle><![CDATA[<h1>]]>${application.name}:- ${ant.project.name}<![CDATA[</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2008 Ben Sion. All Rights Reserved.</i>]]></bottom>
            <fileset dir="${src.dir}" includes="**/*.java"/>
        </javadoc>
    </target>

    <!-- In order to generate the diagrams, a third party application GraphViz
         is required. This application is OS dependent. For more info see
         http://www.graphviz.org
    -->
    <target name="beandoc" depends="init" description="Generate documentation and graphs of Spring bean factories and application context files for this module">
        <echo message="Generating documentation of the Spring beans for module ${ant.project.name}..."/>
        <beandoc beandocprops="${beandoc.propsfile}" outputdir="${docs.beandoc.dir}">
            <fileset dir="${config.dir}">
                <include name="application-context.xml"/>
                <include name="security-context.xml"/>
                <include name="common-authorization-context.xml"/>
                <include name="web-servlet.xml"/>
            </fileset>
        </beandoc>
    </target>

    <target name="schema.up.to.date">
        <uptodate property="is.schema.up.to.date"
                  targetfile="${schema.file.timestamp}">
            <srcfiles dir="${classes.dir}" includes="**/*.class"/>
        </uptodate>
    </target>
        
    <!-- The hbm2ddl requires that the all classes have been compiled and can be
         referenced via the classpath
    -->
    <target name="gen.schema" depends="compile, schema.up.to.date" unless="is.schema.up.to.date" description="Generates DB schema with hbm2ddl.">
        <echo message="Generating the database schema for module ${ant.project.name}..."/>
        <hibernatetool destdir="${generated.dir}">
            <annotationconfiguration configurationfile="${hibernate.cfg.xml}"/>
            <hbm2ddl outputfilename="${schema.file}"
                     drop="true"
                     export="false"
                     format="true"
                     delimiter=";"/>
            <classpath location="${classes.dir}"/>
        </hibernatetool>
        <touch file="${schema.file.timestamp}"/>
    </target>

    <target name="db.create" description="This target creates the database">
        <echo message="CREATE TABLES USING: driver=${jdbc.driverClassName} url=${jdbc.url} user=${jdbc.username} pwd=${jdbc.password}"/>
        <sql driver="${jdbc.driverClassName}"
             url="${jdbc.url}"
             userid="${jdbc.username}"
             password="${jdbc.password}"
             onerror="continue">
            <classpath refid="hsql.classpath"/>
            <fileset dir="${generated.dir}">
                <include name="${schema.file}"/>
            </fileset>
            <fileset dir="${sql.dir}">
                <include name="initialData.sql"/>
            </fileset>
        </sql>
    </target>

    <target name="analyze.code" depends="init" description="Inspect Java bytecode for occurrences of bug patterns using a static analysis tool">
        <echo message="Performing code analysis on module ${ant.project.name}..."/>
        <findbugs home="${findbugs.home}"
                  reportlevel="low"
                  effort="max"
                  jvmargs="-Xmx256M"
                  output="xml:withMessages"
                  outputFile="${output.dir}/${findbugs.xml.file}">
            <auxclasspath refid="compile.classpath"/>
            <sourcepath path="${src.dir}"/>
            <class location="${build.dir}/${module.jarfile}"/>
        </findbugs>
        <xslt in="${output.dir}/${findbugs.xml.file}"
              out="${output.dir}/${findbugs.xml.file}.html"
              style="${findbugs.home}/src/xsl/fancy.xsl">
            <outputproperty name="method" value="html"/>
        </xslt>
    </target>

    <target name="schemadoc" description="Generate graphical documentation of the database schema">
        <echo message="Generating documentation for the database schema ..."/>
        <hibernatetool>
            <annotationconfiguration configurationfile="${hibernate.cfg.xml}"/>
            <hbm2doc destdir="${docs.hibernate.dir}"/>
            <classpath location="${classes.dir}"/>
        </hibernatetool>

        <!--java jar="${3rdparty.home}/SchemaSpy/2.1.1/schemaSpy_2.1.1.jar"
              fork="true">
            <arg value="-t" />
            <arg value="hsqldb"/>
            <arg value="-cp"/>
            <arg value="${3rdparty.home}/HSQLDB/1.8.0/hsqldb.jar"/>
            <arg value="-u" />
            <arg value="${jdbc.username}"/-->
            <!--arg value="-p"/>
            <arg value="${jdbc.password}"/-->
            <!--arg value="-s" />
            <arg value="PUBLIC"/>
            <arg value="-o" />
            <arg value="${docs.schema.dir}"/>
            <arg value="-host" />
            <arg value="localhost"/-->
            <!--arg value="-dbhelp"/-->
        <!--/java-->
    </target>
    
    <target name="code.metrics" depends="init" description="Analyze package dependencies and perform quality metrics on architecture">
        <echo message="Performing code metrics on module ${ant.project.name}..."/>
        <jdepend format="xml" outputfile="${output.dir}/jdepend_metrics.xml">
            <exclude name="java.*"/>
            <exclude name="javax.*"/>
            <exclude name="org.apache.*"/>
            <exclude name="org.hibernate"/>
            <exclude name="org.hibernate.*"/>
            <exclude name="org.mortbay.*"/>
            <exclude name="org.springframework.*"/>
            <classespath>
                <pathelement location="${classes.dir}"/>
            </classespath>
            <classpath refid="compile.classpath"/>   
        </jdepend>
        
        <echo message="creating html output of code metrics"/>
        <xslt in="${output.dir}/jdepend_metrics.xml"
              out="${output.dir}/jdepend.html" 
              style="${ant.home}/etc/jdepend.xsl">
            <outputproperty name="method" value="html"/>
        </xslt>
        
        <echo message="creating diagram of code metrics"/>
        <xslt in="${output.dir}/jdepend_metrics.xml"
              out="${output.dir}/jdepend.dot"
              style="${3rdparty.home}/jDepend/2.9.1/jdepend2dot.xsl">
        </xslt>
        
        <!-- Cannot guarentee that every machine has Graphviz installed so don't
             fail the task if the graph cannot be generated. -->
        <exec executable="dot" failifexecutionfails="false" dir="${output.dir}">
            <arg value="-Tjpg"/>
            <arg value="-o"/>
            <arg value="jdepend-${ant.project.name}.jpg"/>
            <arg value="jdepend.dot"/>
        </exec>
    </target>
     
    <target name="hot.deploy" description="deploy the web components into a running server. This is for developers only">
        <echo message="deploying files to ${web.server.webinf}..."/>
        <copy todir="${web.server.webinf}/jsp">
            <fileset dir="${web.jsp.dir}">
                <exclude name="ROOT/*"/>
            </fileset>
        </copy>
        <copy todir="${web.server.css}">
            <fileset dir="${web.css.dir}">
                <include name="**/*.css"/>
            </fileset>
        </copy>
        <copy todir="${web.server.images}">
            <fileset dir="${web.images.dir}">
                <include name="**/*.gif"/>
                <include name="**/*.png"/>
            </fileset>
        </copy>
        <copy todir="${web.server.scripts}">
            <fileset dir="${web.scripts.dir}">
                <include name="**/*.js"/>
            </fileset>
        </copy>
    </target>
</project>