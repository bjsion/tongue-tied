<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
	
	<!-- ========================= GENERAL DEFINITIONS ========================= -->
	
	
    <!-- Configurer that replaces ${...} placeholders with values from properties files -->
    <!-- (JDBC related properties) -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <!--added for HSQL-->
                <value>WEB-INF/jdbc.properties</value>
                <value>classpath:jdbc.properties</value>
                <value>WEB-INF/fmpp.cfg</value>
            </list>
        </property>
    </bean>

    <bean id="messageSource"
          class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>tonguetied</value>
                <value>language</value>
                <value>classpath:/org/acegisecurity/messages</value>
            </list>
        </property>
    </bean>
    
	<!-- ========================= RESOURCE DEFINITIONS ========================= -->
	
	<!-- Local DataSource that works in any environment -->
	
	<!-- Note that DriverManagerDataSource does not pool; it is not intended for production -->
	
	<!-- See JPetStore for an example of using Commons DBCP BasicDataSource as alternative -->
	
	<!-- See Image Database for an example of using C3P0 ComboPooledDataSource as alternative -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>

	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		
		<property name="configLocation">
		    <value>classpath:hibernate.cfg.xml</value>
		</property>
		
		<property name="configurationClass">
		    <value>org.hibernate.cfg.AnnotationConfiguration</value>
		</property>
		
		<property name="eventListeners">
			<map>
				<entry key="merge">
					<bean class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener"/>
				</entry>
                <entry key="post-delete">
                    <bean class="org.tonguetied.dao.AuditLogPostDeleteEventListener"/>
                </entry>
                <entry key="post-insert">
                    <bean class="org.tonguetied.dao.AuditLogPostInsertEventListener"/>
                </entry>
                <entry key="post-update">
                    <bean class="org.tonguetied.dao.AuditLogPostUpdateEventListener"/>
                </entry>
			</map>
		</property>
	</bean>
	
	<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	
	<!-- ==================================DAO ====================================== -->
	
	<bean id="daoRepository" class="org.tonguetied.dao.DaoRepositoryImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<bean name="openSessionInViewInterceptor" class="org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor">
		<property name="sessionFactory"><ref bean="sessionFactory"/></property>
		<property name="flushModeName"><value>FLUSH_AUTO</value></property>
	</bean>    
   
	
    <!--
    Transactional proxy for the CommandExectutionService.
    
    This service defines the entry point of the command execution flow. 
    A Hibernate transaction is started at the method entry and 
    commited at method exit unless there is an exception thrown. The idea
    here is to use the PROPAGATIION_REQUIRED propagation policy in order 
    for of other services to join the current transaction. Other services 
    can have DAOs associated to them and just join in, reusing the hibernate 
    session bound to the current thread. This allows for transparent lazy 
    loading, transactional write behind and dirty object detection. 
    
    Alot of magic is taken care of by Spring here, YEAH!!
    -->
    
    <bean id="appService" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="target" ref="appServiceTarget"/>
        <property name="transactionAttributes">
            <props>
                <prop key="*">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>

    <bean id="appServiceTarget" autowire="byName" dependency-check="objects" class="org.tonguetied.service.ApplicationServiceImpl"/>
    
    <bean id="userService" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="target" ref="userServiceTarget"/>
        <property name="transactionAttributes">
            <props>
                <prop key="*">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>

    <bean id="userServiceTarget" autowire="byName" dependency-check="objects" class="org.tonguetied.service.UserServiceImpl"/>
    
    <bean id="exportService" dependency-check="objects" class="org.tonguetied.service.ExportServiceImpl" init-method="init">
        <property name="daoRepository" ref="daoRepository"/>
        <property name="sourceRoot" value="${sourceRoot}"/>
        <property name="outputRoot" value="${outputRoot}"/>
    </bean>
    
    <bean id="auditService" autowire="byName" dependency-check="objects" class="org.tonguetied.service.AuditServiceImpl" />
</beans>
