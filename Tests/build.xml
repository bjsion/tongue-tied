<?xml version="1.0" encoding="UTF-8"?>

<!-- Use "ant -p" to see a description of tasks -->
<project name="Tests" default="build" basedir=".">

    <property name="app.root" value="${basedir}/../"/>

    <property file="${app.root}/BuildInfra/global.properties"/>

    <property name="module.jarfile" value="tests.jar"/>

    <property name="src.dir" value="${tests.home}/src"/>
    <property name="resources.dir" value="${tests.home}/resources"/>
    <property name="config.dir" value="${resources.dir}/config"/>
    <property name="findbugs.home" value="${3rdparty.home}/findbugs/1.3.2"/>
    <property name="findbugs.xml.file" value="${ant.project.name}-bug-report.xml"/>
 
    <!-- temporary directories -->
    <property name="classes.dir" value="${tests.home}/classes"/>
    <property name="build.dir" value="${tests.home}/builds"/>
    <property name="data.dir" value="${tests.home}/data"/>
    <property name="docs.dir" value="${tests.home}/docs"/>
    <property name="docs.api.dir" value="${docs.dir}/api"/>
    <property name="output.dir" value="${tests.home}/output"/>

    <property name="build.debug" value="on"/>

    <path id="compile.classpath">
        <pathelement location="${3rdparty.home}/JUnit/4.4/junit.jar"/>
        <pathelement location="${application.home}/builds/tonguetied.jar"/>
        <pathelement location="${server.home}/builds/server.jar"/>
        <pathelement location="${3rdparty.home}/HSQLDB/1.8.0/hsqldb.jar"/>
        <pathelement location="${3rdparty.home}/Hibernate/3.2.0/hibernate3.jar"/>
        <pathelement location="${3rdparty.home}/Spring/2.5/spring.jar"/>
        <pathelement location="${3rdparty.home}/Spring/2.5/spring-test.jar"/>
        <pathelement location="${3rdparty.home}/Log4j/1.2.14/log4j.jar"/>
        <pathelement location="${3rdparty.home}/dom4j/1.6.1/dom4j.jar"/>
        <pathelement location="${3rdparty.home}/JUnit/addons/1.4/junit-addons.jar"/>
        <pathelement location="${3rdparty.home}/Hibernate/annotations/3.2.0/ejb3-persistence.jar"/>
        <pathelement location="${3rdparty.home}/Hibernate/annotations/3.2.0/hibernate-annotations.jar"/>
        <pathelement location="${3rdparty.home}/Jakarta-Commons/commons-logging.jar"/>
        <pathelement location="${3rdparty.home}/Jakarta-Commons/commons-collections-3.2.jar"/>
        <pathelement location="${3rdparty.home}/Jakarta-Commons/commons-lang-2.1.jar"/>
        <pathelement location="${3rdparty.home}/FreeMarker/2.3.9/freemarker.jar"/>
        <pathelement location="${3rdparty.home}/FreeMarker/FMPP/0.9.11/fmpp_teamworks.jar"/>
        <pathelement location="${3rdparty.home}/xmlunit/1.0/xmlunit.jar"/>
        <pathelement location="${3rdparty.home}/jDepend/2.9.1/jdepend.jar"/>
        <pathelement location="${3rdparty.home}/POI/2.5.1/poi.jar"/>
        <pathelement location="${3rdparty.home}/Spring/acegi-security/1.0.4/acegi-security.jar"/>
    </path>
    
    <path id="test.classpath">
        <path refid="compile.classpath"/>
        <pathelement location="${application.home}/generated"/>
        <pathelement location="${build.dir}/${module.jarfile}"/>
        <pathelement location="${3rdparty.home}/cglib/2.1.3/cglib-nodep-2.1_3.jar"/>
        <pathelement location="${3rdparty.home}/dom4j/1.6.1/jaxen-1.1-beta-7.jar"/>
        <pathelement location="${3rdparty.home}/ehcache/1.3.0/ehcache.jar"/>
        <pathelement location="${3rdparty.home}/oro/2.0.8/jakarta-oro-2.0.8.jar"/>
        <pathelement location="${3rdparty.home}/Jta/jta.jar"/>
        <pathelement location="${3rdparty.home}/Antlr/2.7.6/antlr.jar"/>
        <pathelement location="${3rdparty.home}/Jakarta-Commons/commons-lang-2.1.jar"/>
        <pathelement location="${3rdparty.home}/oro/2.0.8/jakarta-oro.jar"/>
    </path>
        
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
        <classpath path="${findbugs.home}/lib/findbugs-ant.jar"/>
    </taskdef>
	
    <target name="init">
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${output.dir}" />   
        <mkdir dir="${docs.dir}"/>   
        <mkdir dir="${data.dir}"/>
    </target>

    <target name="clean.classes" description="Remove all compiled classes">
        <echo message="Cleaning ${ant.project.name} ..."/>
        <delete dir="${classes.dir}" failonerror="true" deleteonexit="true"/>
    </target>

    <target name="clean" depends="clean.classes" description="Remove all generated files, including but not limited to classes, log files and jar files">
        <delete dir="${build.dir}" failonerror="true" deleteonexit="true"/>
        <delete dir="${output.dir}" failonerror="true" deleteonexit="true"/>
        <delete dir="${docs.dir}" failonerror="true" deleteonexit="true"/>   
        <delete dir="${data.dir}" failonerror="true" deleteonexit="true"/>
    </target>

    <target name="jar" depends="compile" description="Generate the Java Archive file and put it an accesable location for other projects">
        <echo message="Generating jar file for module ${ant.project.name} ..."/>
        <jar jarfile="${build.dir}/${module.jarfile}">
            <zipfileset dir="${classes.dir}" includes="**/*.class"/>
            <zipfileset dir="${config.dir}">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
            </zipfileset>
        </jar>
    </target>
	
    <target name="build" depends="jar, validate.xml" description="Compile entire module and validate xml files"/>

    <target name="compile" depends="init" description="Generate all the class files for this module">
        <echo message="Compiling module ${ant.project.name} ..."/>
        <javac srcdir="${src.dir}"
               destdir="${classes.dir}"
               debug="${build.debug}"
               optimize="off"
               deprecation="off">
            <include name="**/*.java"/>
            <classpath refid="compile.classpath" />
        </javac>
    </target>

    <target name="run.tests" depends="jar" description="Execute all the unit tests and generate a report of results" >
        <echo message="Executing unit tests ..." />
        
        <path id="user.dir.internal">
            <pathelement location="${basedir}" />
        </path>

        <pathconvert targetos="unix" property="user.dir.apa" refid="user.dir.internal" />

        <junit printsummary="yes" haltonfailure="no" showoutput="true" forkmode="perBatch" failureproperty="has.tests.failed">
            <classpath refid="test.classpath" />
            <formatter type="xml" />
            <sysproperty key="user.dir" value="${user.dir.apa}"/>

            <batchtest fork="yes" todir="${output.dir}">
                <fileset dir="${src.dir}">
                    <include name="org/tonguetied/**/AllTests.java"/>
                </fileset>
            </batchtest>
        </junit>

        <echo message="Generating report of unit tests" />
        <junitreport todir="${output.dir}">
            <fileset dir="${output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${output.dir}"/>
        </junitreport>
        
        <fail if="has.tests.failed">
            The unit tests failed. Please check the logs to see the errors.
        </fail>
    </target>
	
    <target name="validate.xml" description="Validate XML configuration files" >
        <echo message="validating XML in module ${ant.project.name}..." />
        <schemavalidate>
            <xmlcatalog>
                <dtd publicid="-//W3C//DTD XMLSCHEMA 200102//EN" 
                    location="${3rdparty.home}/XMLEntities/XMLSchema.dtd"/>
                <dtd publicid="datatypes" 
                    location="${3rdparty.home}/XMLEntities/datatypes.dtd"/>
            </xmlcatalog>
            <schema namespace="http://www.springframework.org/schema/beans"
            	file="${3rdparty.home}/XMLEntities/spring-beans-2.5.xsd"/>
            <fileset dir="${config.dir}" id="xml.resources">
                <include name="**/*-context.xml"/>
            </fileset>
        </schemavalidate>
    </target>
    
    <target name="analyze.code" depends="init" description="Inspect Java bytecode for occurrences of bug patterns using a static analysis tool">
        <echo message="Performing code analysis on module ${ant.project.name}..."/>
        <findbugs home="${findbugs.home}"
                  reportlevel="low"   
                  effort="max" 
                  output="xml:withMessages"
                  outputFile="${output.dir}/${findbugs.xml.file}">
            <auxclasspath refid="compile.classpath"/>
            <sourcepath path="${src.dir}"/>
            <class location="${build.dir}/${module.jarfile}"/>
        </findbugs>
        <xslt in="${output.dir}/${findbugs.xml.file}" 
              out="${output.dir}/${findbugs.xml.file}.html"
              style="${findbugs.home}/src/xsl/fancy.xsl">
            <outputproperty name="method" value="html"/>
        </xslt>
    </target>
     
    <target name="code.metrics" depends="init" description="Analyze package dependencies and perform quality metrics on architecture">
        <echo message="Performing code metrics on module ${ant.project.name}..."/>
        <jdepend format="xml" outputfile="${output.dir}/jdepend_metrics.xml">
            <exclude name="java.*"/>
            <exclude name="javax.*"/>
            <classespath>
                <pathelement location="${classes.dir}"/>
                <pathelement location="${server.home}/classes"/>
            </classespath>
            <classpath refid="compile.classpath"/>   
        </jdepend>
        
        <echo message="creating html output of code metrics"/>
        <xslt in="${output.dir}/jdepend_metrics.xml"
              out="${output.dir}/jdepend.html" 
              style="${ant.home}/etc/jdepend.xsl">
            <outputproperty name="method" value="html"/>
        </xslt>
        
        <echo message="creating diagram of code metrics"/>
        <xslt in="${output.dir}/jdepend_metrics.xml"
              out="${output.dir}/jdepend.dot"
              style="${3rdparty.home}/jDepend/2.9.1/jdepend2dot.xsl">
        </xslt>
        
        <!-- Cannot guarentee that every machine has Graphviz installed so don't
             fail the task if the graph cannot be generated. -->
        <exec executable="dot" failifexecutionfails="false" dir="${output.dir}">
            <arg value="-Tjpg"/>
            <arg value="-o"/>
            <arg value="jdepend-${ant.project.name}.jpg"/>
            <arg value="jdepend.dot"/>
        </exec>
    </target>
     
    <target name="javadoc" depends="init" description="generate the javadoc for this module">
        <echo message="Generating java api documentation for module ${ant.project.name}..."/>
        <javadoc destdir="${docs.api.dir}" 
                 useexternalfile="true" 
                 author="true"   
                 version="true"   
                 use="true"   
                 classpathref="compile.classpath"
                 windowtitle="${ant.project.name} API">
            <doctitle><![CDATA[<h1>]]>${application.name}:- ${ant.project.name}<![CDATA[</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2008 Ben Sion. All Rights Reserved.</i>]]></bottom>
            <fileset dir="${src.dir}" includes="**/*.java"/>
        </javadoc>
    </target>
</project>